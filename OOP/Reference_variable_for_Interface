In Java, a reference variable is used to refer to an object or instance of a class or an interface.
When it comes to interfaces, a reference variable can be created in a similar way as for a class,
but with some important differences.

Creating a Reference Variable for an Interface
An interface in Java defines a contract (a set of methods that must be implemented by any class that implements the interface),
but it does not provide any implementation for these methods.

To create a reference variable for an interface,
you use the interface name as the data type.
However, you cannot directly create an object of an interface because it lacks a concrete implementation.

Instead, a reference variable of an interface can hold a reference to an object of a class that implements the interface.
Hereâ€™s how it works step by step:

Define an Interface:

CODE ---->

interface Animal {
    void makeSound();
}

Create a Class that Implements the Interface:

class Dog implements Animal {
    @Override
    public void makeSound() {
        System.out.println("Bark");
    }
}

Create a Reference Variable for the Interface:


Animal animal; // Interface reference variable

Assign an Object to the Reference Variable -->

animal = new Dog(); // 'animal' refers to a Dog object


Call the Interface Method -->

animal.makeSound(); // Output: Bark
__________________________________________________________________

Explanation in Depth
Why Use an Interface Reference Variable?
Polymorphism: Using an interface reference allows for polymorphic behavior in Java. The reference variable can point to objects of any class that implements the interface. This enables writing flexible and reusable code, where the exact type of the object can be determined at runtime.

CODE --->

Animal myAnimal = new Dog();
myAnimal.makeSound(); // Calls Dog's implementation

myAnimal = new Cat(); // Assuming Cat also implements Animal
myAnimal.makeSound(); // Calls Cat's implementation
Decoupling Code: By using an interface reference, the code becomes less dependent on the specific class types.
The implementation details can change without affecting the code that uses the interface.

Rules and Considerations
Cannot Instantiate an Interface Directly: You cannot create an object directly from an interface, like this:

java
Copy code
Animal animal = new Animal(); // Compilation error
This is because an interface does not have a constructor or any implementation code.

Reference Variable Can Only Access Interface Methods: When using an interface reference variable,
you can only call the methods defined in the interface.
If the implementing class has additional methods not specified in the interface,
they cannot be accessed through the interface reference.

java
Copy code
Dog dog = new Dog();
dog.makeSound(); // Allowed
dog.wagTail();   // Allowed, assuming wagTail() is a Dog-specific method

Animal animal = dog;
animal.makeSound(); // Allowed
animal.wagTail();   // Compilation error, not part of the Animal interface
Dynamic Method Dispatch: The method that gets called is determined at runtime based on the actual object type (not the reference type).
This is known as dynamic method dispatch, which enables polymorphism in Java.

Practical Example
Let's look at a more complex example with multiple classes implementing the same interface:

java
Copy code
interface Shape {
    void draw();
}

class Circle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Circle");
    }
}

class Rectangle implements Shape {
    @Override
    public void draw() {
        System.out.println("Drawing a Rectangle");
    }
}

public class Main {
    public static void main(String[] args) {
        Shape shape;

        shape = new Circle(); // Interface reference pointing to Circle object
        shape.draw();         // Output: Drawing a Circle

        shape = new Rectangle(); // Interface reference pointing to Rectangle object
        shape.draw();            // Output: Drawing a Rectangle
    }
}
Here, the Shape interface reference is used to point to different objects (Circle and Rectangle). The exact method that gets executed is determined at runtime.

Summary
An interface reference variable can refer to any object of a class that implements the interface.
It allows for polymorphism, where the exact class type is resolved at runtime.
The reference variable can only access methods defined in the interface.
Direct instantiation of an interface is not allowed, as interfaces do not have constructors or concrete implementations.
By using interface reference variables, Java provides flexibility and decoupling, making the code easier to maintain and extend.